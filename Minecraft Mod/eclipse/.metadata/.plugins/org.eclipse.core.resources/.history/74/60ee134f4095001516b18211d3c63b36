package com.ThreeFoolsStudios.SpectralMod.items;

import net.minecraft.entity.effect.EntityLightningBolt;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.entity.projectile.EntitySmallFireball;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.potion.Potion;
import net.minecraft.potion.PotionEffect;
import net.minecraft.util.BlockPos;
import net.minecraft.util.ChatComponentTranslation;
import net.minecraft.util.EnumChatFormatting;
import net.minecraft.util.EnumParticleTypes;
import net.minecraft.util.MovingObjectPosition;
import net.minecraft.util.Vec3;
import net.minecraft.world.World;

import com.ThreeFoolsStudios.SpectralMod.SpectralPlayer.ExtendedSpectralPlayer;

public class ItemElementalParchment extends Item {

	public int SpellChoice = 1;
	
	public ItemElementalParchment(){
		this.maxStackSize = 1;
	}
	
	public void onUpdate(ItemStack stack, World worldIn, EntityPlayer PlayerIn, int itemSlot, boolean isSelected) {
	}
	
	@Override
	public ItemStack onItemRightClick(ItemStack stack, World worldIn,
			EntityPlayer playerIn) {
		
		ExtendedSpectralPlayer SpectralPlayer = ExtendedSpectralPlayer.get(playerIn);
		if ((SpectralPlayer.GetSpectralLevel() == 1 && SpectralPlayer.GetNumberOfSpells() == 1) || 
				
			(SpectralPlayer.GetSpectralLevel() == 2 &&(SpectralPlayer.GetNumberOfSpells() == 1 && 
			(SpectralPlayer.GetSpell1Level() == 2 || SpectralPlayer.GetSpell2Level() == 2 || 
			SpectralPlayer.GetSpell3Level() == 2)) || SpectralPlayer.GetNumberOfSpells() == 2) ||
			
			(SpectralPlayer.GetSpectralLevel() == 3 && (SpectralPlayer.GetNumberOfSpells() == 1 
			&& (SpectralPlayer.GetSpell1Level() == 3 || SpectralPlayer.GetSpell2Level() == 3 || 
			SpectralPlayer.GetSpell3Level() == 3)) || (SpectralPlayer.GetNumberOfSpells() == 2 
			&& (SpectralPlayer.GetSpell1Level() == 2 && SpectralPlayer.GetSpell2Level() == 1) || 
			(SpectralPlayer.GetSpell1Level() == 2 && SpectralPlayer.GetSpell3Level() == 1) || 
			(SpectralPlayer.GetSpell2Level() == 2 && SpectralPlayer.GetSpell1Level() == 1) || 
			(SpectralPlayer.GetSpell2Level() == 2 && SpectralPlayer.GetSpell3Level() == 1) || 
			(SpectralPlayer.GetSpell3Level() == 2 && SpectralPlayer.GetSpell1Level() == 1) || 
			(SpectralPlayer.GetSpell3Level() == 2 && SpectralPlayer.GetSpell2Level() == 1)) || 
			(SpectralPlayer.GetSpell1Level() == 1 && SpectralPlayer.GetSpell2Level() == 1 && 
			SpectralPlayer.GetSpell3Level() == 1) ||
			
			(SpectralPlayer.GetSpectralLevel() == 4) ) ){
		SpectralPlayer.ForceLevelUp(1);
		} 
		
     if (!playerIn.isSneaking()){//start cast of spell
    	 
    	 switch (SpectralPlayer.GetActiveSpell()){
    	 
    	 	case 1:
    	 		playerIn.addChatMessage(new ChatComponentTranslation("Spell 1 cast"));
    	 			switch (SpectralPlayer.GetSpell1Level()){
    	 				
    	 				case 1:
    	 					break;
    	 				case 2:
    	 					break;
    	 				case 3:
    	 					break;
    	 			}
    		 	break;
    		 	
    	 	case 2: 
    	 		playerIn.addChatMessage(new ChatComponentTranslation("Spell 2 cast"));
    	 			switch (SpectralPlayer.GetSpell2Level()){
 				
    	 				case 1:
    	 					break;
    	 				case 2:
    	 					break;
    	 				case 3:
    	 					break;
    	 			}
    		 	break;
    		 	
    	 	case 3:
    	 		playerIn.addChatMessage(new ChatComponentTranslation("Spell 3 cast"));
	 				switch (SpectralPlayer.GetSpell3Level()){
 				
	 					case 1:
	 						break;
	 					case 2:
	 						break;
	 					case 3:
	 						break;
	 				}
    	 		break;
    	 	
    	 	case 4:
    	 		playerIn.addChatMessage(new ChatComponentTranslation("Spell 4 cast"));
 					switch (SpectralPlayer.GetMasterSpell()){
 				
 						case 1:
 							MovingObjectPosition LookAt = playerIn.rayTrace(10, 10);
 					    	double xCoord = LookAt.getBlockPos().getX();
 					    	double yCoord = LookAt.getBlockPos().getY();
 					    	double zCoord = LookAt.getBlockPos().getZ();
 					    	playerIn.setPosition(xCoord, yCoord + 1, zCoord);
 					    	playerIn.fallDistance = 0;
 							break;
 						case 2:
 							playerIn.setHealth(30);
 							break;
 						case 3:
 							MovingObjectPosition LookAt2 = playerIn.rayTrace(10, 10);
 					    	double xCoord2 = LookAt2.getBlockPos().getX();
 					    	double yCoord2 = LookAt2.getBlockPos().getY();
 					    	double zCoord2 = LookAt2.getBlockPos().getZ();
 							break;
 					}
    	 		break;
    	 		
    	 		
    	 }
     }
		return stack;
	}     			
      /* if (!playerIn.isSneaking())
       { //start cast of spell

				if (!worldIn.isRemote){
					SpectralPlayer.SpectralExperienceGive(3 * (SpellChoice % 2)); //give magic experience
					playerIn.addChatMessage(new ChatComponentTranslation(SpectralPlayer.GetExperience("")));
					}
				
	    		switch (SpellChoice){
	    		case 1:
	    				worldIn.spawnParticle(EnumParticleTypes.LAVA, playerIn.posX + 1, playerIn.posY, playerIn.posZ, 0.0D, 0.0D, 0.0D);
	    				worldIn.spawnParticle(EnumParticleTypes.LAVA, playerIn.posX - 1, playerIn.posY , playerIn.posZ, 0.0D, 0.0D, 0.0D);
	    				worldIn.spawnParticle(EnumParticleTypes.LAVA, playerIn.posX, playerIn.posY, playerIn.posZ + 1, 0.0D, 0.0D, 0.0D);
	    				worldIn.spawnParticle(EnumParticleTypes.LAVA, playerIn.posX, playerIn.posY , playerIn.posZ - 1, 0.0D, 0.0D, 0.0D);
	    				Vec3 v3 = playerIn.getLook(1);
	    				EntitySmallFireball smallfireball = new EntitySmallFireball(worldIn, playerIn.posX, playerIn.posY + playerIn.height , playerIn.posZ , v3.xCoord, v3.yCoord, v3.zCoord);
	    				smallfireball.shootingEntity = playerIn;
	    				if (!worldIn.isRemote == true){
	    				worldIn.spawnEntityInWorld(smallfireball);
	    				}
	    				break;
	    		case 3:
	    				worldIn.spawnParticle(EnumParticleTypes.CRIT_MAGIC, playerIn.posX + 1, playerIn.posY+1, playerIn.posZ, 0.0D, 0.0D, 0.0D);
	    				worldIn.spawnParticle(EnumParticleTypes.CRIT_MAGIC, playerIn.posX - 1, playerIn.posY+1, playerIn.posZ, 0.0D, 0.0D, 0.0D);
	    				worldIn.spawnParticle(EnumParticleTypes.CRIT_MAGIC, playerIn.posX, playerIn.posY+1, playerIn.posZ + 1, 0.0D, 0.0D, 0.0D);
	    				worldIn.spawnParticle(EnumParticleTypes.CRIT_MAGIC, playerIn.posX, playerIn.posY+1, playerIn.posZ - 1, 0.0D, 0.0D, 0.0D);
	    				playerIn.addPotionEffect(new PotionEffect(Potion.waterBreathing.id, 500, 5));
	    				break;
	    		case 5: 
	    				worldIn.spawnParticle(EnumParticleTypes.VILLAGER_HAPPY, playerIn.posX + 1, playerIn.posY+1, playerIn.posZ, 0.0D, 0.0D, 0.0D);
	    				worldIn.spawnParticle(EnumParticleTypes.VILLAGER_HAPPY, playerIn.posX - 1, playerIn.posY+1, playerIn.posZ, 0.0D, 0.0D, 0.0D);
	    				worldIn.spawnParticle(EnumParticleTypes.VILLAGER_HAPPY, playerIn.posX, playerIn.posY+1, playerIn.posZ + 1, 0.0D, 0.0D, 0.0D);
	    				worldIn.spawnParticle(EnumParticleTypes.VILLAGER_HAPPY, playerIn.posX, playerIn.posY+1, playerIn.posZ - 1, 0.0D, 0.0D, 0.0D);
	    				MovingObjectPosition BreakLookAt = playerIn.rayTrace(10, 10);
				    	double BreakxCoord = BreakLookAt.getBlockPos().getX();
				    	double BreakyCoord = BreakLookAt.getBlockPos().getY();
				    	double BreakzCoord = BreakLookAt.getBlockPos().getZ();
				    	worldIn.destroyBlock(new BlockPos(BreakxCoord, BreakyCoord, BreakzCoord), true);
				    	break;
	    		case 7:
	    				worldIn.spawnParticle(EnumParticleTypes.CLOUD, playerIn.posX + 1, playerIn.posY+1, playerIn.posZ, 0.0D, 0.0D, 0.0D);
	    				worldIn.spawnParticle(EnumParticleTypes.CLOUD, playerIn.posX - 1, playerIn.posY+1, playerIn.posZ, 0.0D, 0.0D, 0.0D);
	    				worldIn.spawnParticle(EnumParticleTypes.CLOUD, playerIn.posX, playerIn.posY+1, playerIn.posZ + 1, 0.0D, 0.0D, 0.0D);
	    				worldIn.spawnParticle(EnumParticleTypes.CLOUD, playerIn.posX, playerIn.posY+1, playerIn.posZ - 1, 0.0D, 0.0D, 0.0D);
	    				playerIn.capabilities.allowFlying = true;
	    				break;
	    		case 9:
	    				worldIn.spawnParticle(EnumParticleTypes.FIREWORKS_SPARK, playerIn.posX + 1, playerIn.posY+1, playerIn.posZ, 0.0D, 0.0D, 0.0D);
	    				worldIn.spawnParticle(EnumParticleTypes.FIREWORKS_SPARK, playerIn.posX - 1, playerIn.posY+1, playerIn.posZ, 0.0D, 0.0D, 0.0D);
	    				worldIn.spawnParticle(EnumParticleTypes.FIREWORKS_SPARK, playerIn.posX, playerIn.posY+1, playerIn.posZ + 1, 0.0D, 0.0D, 0.0D);
	    				worldIn.spawnParticle(EnumParticleTypes.FIREWORKS_SPARK, playerIn.posX, playerIn.posY+1, playerIn.posZ - 1, 0.0D, 0.0D, 0.0D);
	    				MovingObjectPosition LightningLookAt = playerIn.rayTrace(10, 10);
				    	double LightningXCoord = LightningLookAt.getBlockPos().getX();
				    	double LightningYCoord = LightningLookAt.getBlockPos().getY();
				    	double LightningZCoord = LightningLookAt.getBlockPos().getZ();
	    				EntityLightningBolt Lightning = new EntityLightningBolt(worldIn, LightningXCoord, LightningYCoord, LightningZCoord);
	    				worldIn.spawnEntityInWorld(Lightning);
	    				break;
	    		} //end of switch statement
	    		
	    		if (SpectralPlayer.CheckSpectralLevelUp() == true){
		    		SpectralPlayer.SpectralLevelUp();
		    		playerIn.addChatMessage(new ChatComponentTranslation("LEVEL UP"));				
		    	}
	    		
				
				else { //no mana
					
					if (!worldIn.isRemote){
					playerIn.addChatMessage(new ChatComponentTranslation("Mana LOW"));
					}
					
				}//end no mana				
			}//end cast of spell 
       
       else if(playerIn.isSneaking())
       {
    	   SpectralPlayer.SpectralSpellChange();
    	   
    	   SpellChoice = SpellChoice + 1;
    	   if (SpellChoice > 10) {
    		   SpellChoice = 1;
    	   }
    	   
    	   if (SpellChoice == 1) {
    		   String E1coloredText = EnumChatFormatting.DARK_AQUA + "Pyrokinesis";
    		   playerIn.addChatMessage( new ChatComponentTranslation(E1coloredText));
    	   }
    	   
    	   if (SpellChoice == 3) {
    		   String E2coloredText = EnumChatFormatting.DARK_AQUA + "Aquakinesis";
    		   playerIn.addChatMessage( new ChatComponentTranslation(E2coloredText));
    	   }
    	   
    	   if (SpellChoice == 5) {
    		   String E3coloredText = EnumChatFormatting.DARK_AQUA + "Geokinesis";
    		   playerIn.addChatMessage( new ChatComponentTranslation(E3coloredText));
    	   }
    	   
    	   if (SpellChoice == 7) {
    		   String E4coloredText = EnumChatFormatting.DARK_AQUA + "Aerokinesis";
    		   playerIn.addChatMessage( new ChatComponentTranslation(E4coloredText));
    	   }
    	   
    	   if (SpellChoice == 9) {
    		   String E5coloredText = EnumChatFormatting.DARK_AQUA + "Fulgurkinesis";
    		   playerIn.addChatMessage( new ChatComponentTranslation(E5coloredText));
    	   }
       } */
}
